<?php
// $Id$

/**
 * @file
 * Stores user registrations locally to be synced back to the server at a
 * later date.
 *
 * @author greenSkin
 */

define('OFFLINE_SIGNUP_DEFAULT_PASSWORD', 'changeme');

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_perm().
 */
function offline_signup_perm() {
  return array('administer offline signup', 'access offline signup page');
}

/**
 * Implementation of hook_menu().
 */
function offline_signup_menu() {
  $items['admin/settings/offline_signup'] = array(
    'title' => 'Offline sign-up',
    'description' => 'Configure settings for offline sign-up.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('offline_signup_admin_form'),
    'access arguments' => array('administer offline signup'),
    'file' => 'offline_signup.admin.inc'
  );
  $items['offline/signup'] = array(
    'title' => 'Offline sign-up',
    'page callback' => 'theme',
    'page arguments' => array('offline_signup_page'),
    'access arguments' => array('access offline signup page'),
    'file' => 'offline_signup.pages.inc'
  );

  $items['offline_signup/ajax/settings'] = array(
    'page callback' => 'offline_signup_ajax_settings',
    'access arguments' => array('administer offline signup'),
    'file' => 'offline_signup.ajax.inc',
    'type' => MENU_CALLBACK
  );
  $items['offline_signup/ajax/sync/user'] = array(
    'page callback' => 'offline_signup_ajax_sync_user',
    'access arguments' => array('administer offline signup'),
    'file' => 'offline_signup.ajax.inc',
    'type' => MENU_CALLBACK
  );
  $items['offline_signup/ajax/sync/drawing'] = array(
    'page callback' => 'offline_signup_ajax_sync_drawing',
    'access arguments' => array('administer offline signup'),
    'file' => 'offline_signup.ajax.inc',
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implementation of hook_elements().
 */
function offline_signup_elements() {
  $system_elements = system_elements();
  $type['email'] = $system_elements['textfield'];
  return $type;
}

/**
 * Implementation of hook_theme().
 */
function offline_signup_theme() {
  return array(
    'email' => array(
      'arguments' => array('element' => NULL)
    ),
    'offline_signup_page' => array(
      'arguments' => array()
    ),
    'offline_signup' => array(
      'arguments' => array(),
      'template' => 'offline-signup'
    ),
    'offline_signup_dependency_message' => array(
      'arguments' => array('message' => NULL)
    ),
    'offline_signup_content' => array(
      'arguments' => array()
    ),
    'offline_signup_content_signup' => array(
      'arguments' => array()
    ),
    'offline_signup_user_form' => array(
      'arguments' => array('form' => NULL)
    ),
    'offline_signup_profiles' => array(
      'arguments' => array()
    ),
    'offline_signup_content_settings' => array(
      'arguments' => array()
    ),
    'offline_signup_content_drawings' => array(
      'arguments' => array()
    ),
    'offline_signup_drawings_form_fieldset' => array(
      'arguments' => array('form' => NULL)
    ),
    'offline_signup_content_sync' => array(
      'arguments' => array()
    ),
    'offline_signup_sync_users_table' => array(
      'arguments' => array()
    ),
    'offline_signup_sync_drawings_table' => array(
      'arguments' => array()
    ),
    'offline_signup_menu_bar' => array(
      'arguments' => array()
    )
  );
}

/**
 * Implementation of hook_user().
 */
function offline_signup_user($op, &$edit, &$account, $category = NULL) {
  if (user_access('administer offline signup')) {
    switch ($op) {
      case 'register':
        $form['event'] = array(
          '#type' => 'textfield',
          '#title' => t('Event')
        );
        return $form;
      case 'insert':
        $event = trim($edit['event']);
        if ($event != '') {
          db_query("INSERT INTO {offline_signup_event_users} (uid, event) VALUES (%d, '%s')", $account->uid, $event);
        }
        break;
    }
  }
  if ($op == 'delete') {
    db_query("DELETE FROM {offline_signup_event_users} WHERE uid = %d", $account->uid);
  }
}

/**
 * Implementation of hook_mail().
 */
function offline_signup_mail($key, &$message, $params) {
  switch ($key) {
    case 'user_update':
      dpm($message);
      $message['header']['Content-Type'] = 'text/html';
      $subject = 'this';
      $message['subject'] .= str_replace(array("\r", "\n"), '', $subject);
      $message['body'][] = 'hello';
      return $message;
  }
}

/**
 * Implementation of form_type_element_value().
 */
function form_type_email_value($form, $edit = FALSE) {
  return form_type_textfield_value($form, $edit);
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

function offline_signup_drawing_form() {
  $form['number'] = array(
    '#type' => 'textfield',
    '#required' => TRUE
  );
  $form['event'] = array(
    '#type' => 'textfield',
    '#required' => TRUE
  );
  $form['mail'] = array(
    '#type' => 'textfield',
    '#required' => TRUE
  );
  $form['selected'] = array(
    '#type' => 'textfield',
    '#required' => TRUE
  );
  return $form;
}

function offline_signup_drawing_form_validate($form, &$form_state) {
  if (!is_numeric($form_state['values']['number'])) {
    form_set_error('number', t('The drawing number has to be an number.'));
  }
  if (!valid_email_address($form_state['values']['mail'])) {
    form_set_error('mail', t('Invalid e-mail address.'));
  }
  if (!is_numeric($form_state['values']['selected'])) {
    form_set_error('selected', t('The selected value must be in the form of a UNIX timestamp.'));
  }
}

function offline_signup_drawing_form_submit($form, &$form_state) {
  db_query("INSERT INTO {offline_signup_drawings} (number, event, mail, selected) VALUES (%d, '%s', '%s', %d)",
    $form_state['values']['number'], $form_state['values']['event'], $form_state['values']['mail'], substr($form_state['values']['selected'], 0, 10));
}

/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

function offline_signup_add_profile_form($type) {
  // Initialize new node.
  $node = array('uid' => 0, 'name' => '', 'type' => $type);
  // Get the original node form.
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $node_form = drupal_retrieve_form($type .'_node_form', $form_state, $node);
  drupal_prepare_form($type .'_node_form', $node_form, $form_state);
  $node_form['#post'] = NULL;
  drupal_process_form($type .'_node_form', $node_form, $form_state);

  foreach (array('uid', 'name', 'author', 'language', 'options', 'menu', 'revision_information', 'comment_settings', 'attachments') as $key) {
    unset($node_form[$key]);
  }

  unset($node_form['buttons']['preview']);

  $node_form['#id'] = $type .'-node-form';

  return $node_form;
}

/*******************************************************************************
 * Theme Functions
 ******************************************************************************/

function theme_email($element) {
  $size = empty($element['#size']) ? '' : ' size="'. $element['#size'] .'"';
  $maxlength = empty($element['#maxlength']) ? '' : ' maxlength="'. $element['#maxlength'] .'"';
  $class = array('form-text');
  $extra = '';
  $output = '';

  if ($element['#autocomplete_path'] && menu_valid_path(array('link_path' => $element['#autocomplete_path']))) {
    drupal_add_js('misc/autocomplete.js');
    $class[] = 'form-autocomplete';
    $extra =  '<input class="autocomplete" type="hidden" id="'. $element['#id'] .'-autocomplete" value="'. check_url(url($element['#autocomplete_path'], array('absolute' => TRUE))) .'" disabled="disabled" />';
  }
  _form_set_class($element, $class);

  if (isset($element['#field_prefix'])) {
    $output .= '<span class="field-prefix">'. $element['#field_prefix'] .'</span> ';
  }

  $output .= '<input type="email"'. $maxlength .' name="'. $element['#name'] .'" id="'. $element['#id'] .'"'. $size .' value="'. check_plain($element['#value']) .'"'. drupal_attributes($element['#attributes']) .' />';

  if (isset($element['#field_suffix'])) {
    $output .= ' <span class="field-suffix">'. $element['#field_suffix'] .'</span>';
  }

  return theme('form_element', $element, $output) . $extra;
}

function template_preprocess_offline_signup(&$vars) {
  $vars['menu_bar'] = theme('offline_signup_menu_bar');
  $vars['content'] = theme('offline_signup_content');
}
