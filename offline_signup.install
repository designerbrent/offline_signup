<?php
// $Id$

/**
 * Implementation of hook_schema().
 */
function offline_signup_schema() {
  $schema['offline_signup_event_users'] = array(
    'description' => 'Stores what users were created via what event.',
    'fields' => array(
      'uid' => array(
        'description' => "User's {users}.uid.",
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0
      ),
      'event' => array(
        'description' => 'An event.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      )
    ),
    'unique keys' => array('uid_event' => array('uid', 'event'))
  );
  $schema['offline_signup_user_updates'] = array(
    'description' => 'Store updated user data to be applied upon confirmation from user.',
    'fields' => array(
      'uid' => array(
        'description' => "User's {users}.uid.",
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0
      ),
      'form_values' => array(
        'description' => 'The form values submitted that need user confirmation before applying.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big'
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the user update values were synced to the server.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0
      ),
      'request_sent' => array(
        'description' => 'Boolean of whether a request has been sent to the user to confirm these updates.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'size' => 'tiny',
        'default' => 0
      )
    ),
    'unique keys' => array('uid_updated' => array('uid', 'updated'))
  );
  $schema['offline_signup_drawings'] = array(
    'description' => 'Store drawings information.',
    'fields' => array(
      'number' => array(
        'description' => 'The incremental number the drawing was during an event.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0
      ),
      'event' => array(
        'description' => 'The event the drawing was held at.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'mail' => array(
        'description' => "User's email address.",
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'default' => ''
      ),
      'selected' => array(
        'description' => 'The Unix timestamp when the user update values were synced to the server.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0
      )
    ),
    'unique keys' => array('number_event' => array('number', 'event'))
  );
  return $schema;
}

/**
 * Implementation of hook_install().
 */
function offline_signup_install() {
  drupal_install_schema('offline_signup');
}

/**
 * Implementation of hook_uninstall().
 */
function offline_signup_uninstall() {
  drupal_uninstall_schema('offline_signup');
  variable_del('offline_signup_event');
}

/**
 * Add the {offline_signup_user_updates} table.
 */
function offline_signup_update_6000() {
  $ret = array();

  $schema['offline_signup_user_updates'] = array(
    'description' => 'Store updated user data to be applied upon confirmation from user.',
    'fields' => array(
      'uid' => array(
        'description' => "User's {users}.uid.",
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0
      ),
      'form_values' => array(
        'description' => 'The form values submitted that need user confirmation before applying.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big'
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the user update values were synced to the server.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0
      ),
      'request_sent' => array(
        'description' => 'Boolean of whether a request has been sent to the user to confirm these updates.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'size' => 'tiny',
        'default' => 0
      )
    ),
    'unique keys' => array('uid_updated' => array('uid', 'updated'))
  );
  db_create_table($ret, 'offline_signup_user_updates', $schema['offline_signup_user_updates']);

  return $ret;
}

/**
 * Add the {offline_signup_drawings} table.
 */
function offline_signup_update_6001() {
  $ret = array();

  $schema['offline_signup_drawings'] = array(
    'description' => 'Store drawings information.',
    'fields' => array(
      'number' => array(
        'description' => 'The incremental number the drawing was during an event.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0
      ),
      'event' => array(
        'description' => 'The event the drawing was held at.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''
      ),
      'mail' => array(
        'description' => "User's email address.",
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'default' => ''
      ),
      'selected' => array(
        'description' => 'The Unix timestamp when the user update values were synced to the server.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0
      )
    ),
    'unique keys' => array('number_event' => array('number', 'event'))
  );
  db_create_table($ret, 'offline_signup_drawings', $schema['offline_signup_drawings']);

  return $ret;
}
